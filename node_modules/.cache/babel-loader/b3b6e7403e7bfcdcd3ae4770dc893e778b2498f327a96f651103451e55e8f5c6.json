{"ast":null,"code":"var _jsxFileName = \"/home/vaseliy/\\u0420\\u0430\\u0431\\u043E\\u0447\\u0438\\u0439 \\u0441\\u0442\\u043E\\u043B/ReactApps/todoApp1/src/components/timer/timer.js\",\n  _s = $RefreshSig$();\n// import React, { Component } from \"react\";\n\nimport { useRef, useState } from \"react\";\n\n// class Timer extends Component {\n//   constructor(props) {\n//     super(props);\n\n//     this.state = {\n//       time: this.props.initialTime,\n//       isRunning: false,\n//       done: this.props.done,\n//     };\n//   }\n\n//   startTimer = () => {\n//     if (!this.state.isRunning) {\n//       this.timer = setInterval(() => {\n//         if (this.state.time > 0) {\n//           this.setState({ time: this.state.time - 1 });\n//         } else {\n//           clearInterval(this.timer);\n//           this.setState({ isRunning: false });\n//         }\n//       }, 1000);\n\n//       this.setState({ isRunning: true });\n//     }\n//   };\n\n//   pauseTimer = () => {\n//     clearInterval(this.timer);\n//     this.setState({ isRunning: false });\n//   };\n\n//   render() {\n//     const { time, isRunning } = this.state;\n\n//     const minutes = Math.floor(time / 60);\n//     const seconds = time % 60;\n\n//     return (\n//       <>\n//         <button className=\"icon icon-play\" onClick={this.startTimer} disabled={isRunning}></button>\n//         <button className=\"icon icon-pause\" onClick={this.pauseTimer} disabled={!isRunning}></button>\n//         {` ${minutes}:${seconds}`}\n//       </>\n//     )\n//   }\n// }\n\n// export default Timer;\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Timer = _ref => {\n  _s();\n  let {\n    initialTime,\n    propDone\n  } = _ref;\n  const [time, setTime] = useState(initialTime);\n  const [isRunning, setIsRunning] = useState(false);\n  const [done, setDone] = useState(propDone);\n  const countRef = useRef(null);\n  console.log(time);\n  function startTimer() {\n    setIsRunning(true);\n    countRef.current = setInterval(() => {\n\n      // const newTime = time - 1\n      // setTime(newTime)\n    }, 1000);\n  }\n  function stopTimer() {\n    clearInterval(countRef.current);\n    setIsRunning(false);\n  }\n\n  // const startTimer = () => {\n  //   if (!isRunning) {\n  //     let timer = setInterval(() => {\n  //       if (time > 0) {\n  //         setTime(() => time = time - 1);\n  //       } else {\n  //         clearInterval(timer);\n  //         setIsRunning(false);\n  //       }\n  //     }, 1000);\n\n  //     setIsRunning(true);\n  //   }\n  // };\n\n  // const pauseTimer = () => {\n  //   // clearInterval(timer);\n  //   setIsRunning(false);\n  // };\n  console.log('time: ', time);\n  let minutes = Math.floor(time / 60);\n  let seconds = time % 60;\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"icon icon-play\",\n      onClick: startTimer,\n      disabled: isRunning\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"icon icon-pause\",\n      onClick: stopTimer,\n      disabled: !isRunning\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this), ` ${minutes}:${seconds}`]\n  }, void 0, true);\n};\n_s(Timer, \"XsDqh3idQnjMrZDARwu8s3RUcxs=\");\n_c = Timer;\nexport default Timer;\nvar _c;\n$RefreshReg$(_c, \"Timer\");","map":{"version":3,"names":["useRef","useState","Timer","initialTime","propDone","time","setTime","isRunning","setIsRunning","done","setDone","countRef","console","log","startTimer","current","setInterval","stopTimer","clearInterval","minutes","Math","floor","seconds"],"sources":["/home/vaseliy/Рабочий стол/ReactApps/todoApp1/src/components/timer/timer.js"],"sourcesContent":["// import React, { Component } from \"react\";\n\nimport { useRef, useState } from \"react\"\n\n// class Timer extends Component {\n//   constructor(props) {\n//     super(props);\n\n//     this.state = {\n//       time: this.props.initialTime,\n//       isRunning: false,\n//       done: this.props.done,\n//     };\n//   }\n\n//   startTimer = () => {\n//     if (!this.state.isRunning) {\n//       this.timer = setInterval(() => {\n//         if (this.state.time > 0) {\n//           this.setState({ time: this.state.time - 1 });\n//         } else {\n//           clearInterval(this.timer);\n//           this.setState({ isRunning: false });\n//         }\n//       }, 1000);\n\n//       this.setState({ isRunning: true });\n//     }\n//   };\n\n//   pauseTimer = () => {\n//     clearInterval(this.timer);\n//     this.setState({ isRunning: false });\n//   };\n\n//   render() {\n//     const { time, isRunning } = this.state;\n\n//     const minutes = Math.floor(time / 60);\n//     const seconds = time % 60;\n\n//     return (\n//       <>\n//         <button className=\"icon icon-play\" onClick={this.startTimer} disabled={isRunning}></button>\n//         <button className=\"icon icon-pause\" onClick={this.pauseTimer} disabled={!isRunning}></button>\n//         {` ${minutes}:${seconds}`}\n//       </>\n//     )\n//   }\n// }\n\n// export default Timer;\n\nconst Timer = ({initialTime, propDone}) => {\n  const [time, setTime] = useState(initialTime)\n  const [isRunning, setIsRunning] = useState(false)\n  const [done, setDone] = useState(propDone)\n  const countRef = useRef(null)\n\n  console.log( time)\n\n  function startTimer() {\n    setIsRunning(true)\n    countRef.current = setInterval(() => {\n\n      // const newTime = time - 1\n      // setTime(newTime)\n    }, 1000)\n  }\n\n  function stopTimer() {\n    clearInterval(countRef.current)\n    setIsRunning(false)\n  }\n\n  // const startTimer = () => {\n  //   if (!isRunning) {\n  //     let timer = setInterval(() => {\n  //       if (time > 0) {\n  //         setTime(() => time = time - 1);\n  //       } else {\n  //         clearInterval(timer);\n  //         setIsRunning(false);\n  //       }\n  //     }, 1000);\n\n  //     setIsRunning(true);\n  //   }\n  // };\n\n  // const pauseTimer = () => {\n  //   // clearInterval(timer);\n  //   setIsRunning(false);\n  // };\n  console.log('time: ', time)\n  let minutes = Math.floor(time / 60);\n  let seconds = time % 60;\n\n  return (\n    <>\n      <button className=\"icon icon-play\" onClick={startTimer} disabled={isRunning}></button>\n      <button className=\"icon icon-pause\" onClick={stopTimer} disabled={!isRunning}></button>\n      {` ${minutes}:${seconds}`}\n    </>\n  )\n}\n\nexport default Timer\n\n"],"mappings":";;AAAA;;AAEA,SAASA,MAAM,EAAEC,QAAQ,QAAQ,OAAO;;AAExC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAAA;AAAA;AAEA,MAAMC,KAAK,GAAG,QAA6B;EAAA;EAAA,IAA5B;IAACC,WAAW;IAAEC;EAAQ,CAAC;EACpC,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGL,QAAQ,CAACE,WAAW,CAAC;EAC7C,MAAM,CAACI,SAAS,EAAEC,YAAY,CAAC,GAAGP,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAM,CAACQ,IAAI,EAAEC,OAAO,CAAC,GAAGT,QAAQ,CAACG,QAAQ,CAAC;EAC1C,MAAMO,QAAQ,GAAGX,MAAM,CAAC,IAAI,CAAC;EAE7BY,OAAO,CAACC,GAAG,CAAER,IAAI,CAAC;EAElB,SAASS,UAAU,GAAG;IACpBN,YAAY,CAAC,IAAI,CAAC;IAClBG,QAAQ,CAACI,OAAO,GAAGC,WAAW,CAAC,MAAM;;MAEnC;MACA;IAAA,CACD,EAAE,IAAI,CAAC;EACV;EAEA,SAASC,SAAS,GAAG;IACnBC,aAAa,CAACP,QAAQ,CAACI,OAAO,CAAC;IAC/BP,YAAY,CAAC,KAAK,CAAC;EACrB;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACAI,OAAO,CAACC,GAAG,CAAC,QAAQ,EAAER,IAAI,CAAC;EAC3B,IAAIc,OAAO,GAAGC,IAAI,CAACC,KAAK,CAAChB,IAAI,GAAG,EAAE,CAAC;EACnC,IAAIiB,OAAO,GAAGjB,IAAI,GAAG,EAAE;EAEvB,oBACE;IAAA,wBACE;MAAQ,SAAS,EAAC,gBAAgB;MAAC,OAAO,EAAES,UAAW;MAAC,QAAQ,EAAEP;IAAU;MAAA;MAAA;MAAA;IAAA,QAAU,eACtF;MAAQ,SAAS,EAAC,iBAAiB;MAAC,OAAO,EAAEU,SAAU;MAAC,QAAQ,EAAE,CAACV;IAAU;MAAA;MAAA;MAAA;IAAA,QAAU,EACrF,IAAGY,OAAQ,IAAGG,OAAQ,EAAC;EAAA,gBACxB;AAEP,CAAC;AAAA,GApDKpB,KAAK;AAAA,KAALA,KAAK;AAsDX,eAAeA,KAAK;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}