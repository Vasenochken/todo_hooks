{"ast":null,"code":"var _jsxFileName = \"/home/vaseliy/\\u0420\\u0430\\u0431\\u043E\\u0447\\u0438\\u0439 \\u0441\\u0442\\u043E\\u043B/ReactApps/todoApp1/src/components/app/app.js\",\n  _s = $RefreshSig$();\nimport { useState } from 'react';\nimport { formatDistanceToNow } from 'date-fns';\nimport NewTaskForm from '../new-task-form/new-task-form.js';\nimport TaskList from '../task-list/task-list.js';\n// import Footer from '../footer/footer.js';\n\n// import './app.css';\n\n// export default class App extends Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = {\n//       todoData: [],\n//       filter: 'all',\n//     };\n//     this.maxId = 100\n//   }\n\n//   onItemAdd = (text,min,sec) => {\n//     const newItem = {\n//       label: text,\n//       done: false,\n//       date: new Date(),\n//       id: this.maxId++,\n//       timer: +min * 60 + +sec,\n//     };\n//     this.setState(({ todoData }) => {\n//       const newArr = [...todoData];\n//       newArr.push(newItem);\n//       return {\n//         todoData: newArr,\n//       };\n//     });\n//   };\n\n//   completeItem = (id, value) => {\n//     this.setState(({ todoData }) => {\n//       const newArr = todoData.map((el) => {\n//         if (el.id === id) el.done = value;\n//         return el;\n//       });\n//       return { todoData: newArr };\n//     });\n//   };\n\n//   updateEdit = (id, text) => {\n//     this.setState(({ todoData }) => {\n//       const index = todoData.findIndex((el) => el.id === id);\n//       const newArr = [...todoData];\n//       newArr[index].label = text;\n//       return {\n//         todoData: newArr,\n//       };\n//     });\n//   };\n\n//   deleteItem = (id) => {\n//     this.setState(({ todoData }) => {\n//       const index = todoData.findIndex((el) => el.id === id);\n//       const newArr = [...todoData];\n//       newArr.splice(index, 1);\n//       return {\n//         todoData: newArr,\n//       };\n//     });\n//   };\n\n//   changeFilter = (filterName) => {\n//     this.setState({ filter: filterName });\n//   };\n\n//   filterItems = (todoData, filter) => {\n//     switch (filter) {\n//       case 'all':\n//         return todoData;\n//       case 'active':\n//         return todoData.filter((item) => !item.done);\n//       case 'completed':\n//         return todoData.filter((item) => item.done);\n//       default:\n//         return todoData;\n//     }\n//   };\n\n//   clear = () => {\n//     this.setState(({ todoData }) => {\n//       const newArr = todoData.filter((elem) => elem.done !== true);\n//         return {\n//           todoData: newArr,\n//         };\n//     });\n//   };\n\n//   render() {\n//     return (\n//         <section className=\"todoApp\">\n//           <NewTaskForm onItemAdd={this.onItemAdd} />\n//           <section className=\"main\">\n//             <TaskList\n//               todoData={this.filterItems(this.state.todoData, this.state.filter)}\n//               onDeleted={(id) => this.deleteItem(id)}\n//               onCompleted={this.completeItem}\n//               updateEdit={this.updateEdit}\n//             />\n//             <Footer\n//               count={this.filterItems(this.state.todoData, this.state.filter).length}\n//               filter={this.state.filter}\n//               changeFilter={this.changeFilter}\n//               onClear={() => this.clear(this.state.todoData)}\n//             />\n//           </section>\n//         </section>\n//     );\n//   }\n// }\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [todoData, setTodoData] = useState([]);\n  const [filter, setFilter] = useState('all');\n  const generateId = () => {\n    const date = Date.now();\n    const random = Math.floor(Math.random() * 1000);\n    const newId = parseInt(`${date}${random}`);\n    return newId;\n  };\n  const onItemAdd = (text, min, sec) => {\n    const newItem = {\n      label: text,\n      done: false,\n      date: new Date(),\n      id: generateId(),\n      timer: +min * 60 + +sec\n    };\n    const newArr = [...todoData];\n    newArr.push(newItem);\n    setTodoData(newArr);\n  };\n  const deleteItem = id => {\n    const index = todoData.findIndex(el => el.id === id);\n    const newArr = [...todoData];\n    newArr.splice(index, 1);\n    setTodoData(newArr);\n  };\n  const completeItem = (id, done) => {\n    console.log(done);\n    // const newArr = todoData.map((el) => {\n    //   if (el.id === id) el.done = done;\n    //   return el;\n    // })\n    // setTodoData(newArr)\n  };\n\n  //   completeItem = (id, value) => {\n  //     this.setState(({ todoData }) => {\n  //       const newArr = todoData.map((el) => {\n  //         if (el.id === id) el.done = value;\n  //         return el;\n  //       });\n  //       return { todoData: newArr };\n  //     });\n  //   };\n\n  return (\n    /*#__PURE__*/\n    // console.log( todoData )\n    _jsxDEV(\"section\", {\n      className: \"todoApp\",\n      children: [/*#__PURE__*/_jsxDEV(NewTaskForm, {\n        onItemAdd: onItemAdd\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n        className: \"main\",\n        children: /*#__PURE__*/_jsxDEV(TaskList, {\n          todoData: todoData,\n          deleteItem: deleteItem,\n          completeItem: completeItem\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 5\n    }, this)\n  );\n};\n_s(App, \"mvS/TqyQP7uXDFPPgZx71PfhVSk=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useState","formatDistanceToNow","NewTaskForm","TaskList","App","todoData","setTodoData","filter","setFilter","generateId","date","Date","now","random","Math","floor","newId","parseInt","onItemAdd","text","min","sec","newItem","label","done","id","timer","newArr","push","deleteItem","index","findIndex","el","splice","completeItem","console","log"],"sources":["/home/vaseliy/Рабочий стол/ReactApps/todoApp1/src/components/app/app.js"],"sourcesContent":["import { useState } from 'react';\nimport { formatDistanceToNow } from 'date-fns';\n\nimport NewTaskForm from '../new-task-form/new-task-form.js';\nimport TaskList from '../task-list/task-list.js';\n// import Footer from '../footer/footer.js';\n\n// import './app.css';\n\n// export default class App extends Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = {\n//       todoData: [],\n//       filter: 'all',\n//     };\n//     this.maxId = 100\n//   }\n\n//   onItemAdd = (text,min,sec) => {\n//     const newItem = {\n//       label: text,\n//       done: false,\n//       date: new Date(),\n//       id: this.maxId++,\n//       timer: +min * 60 + +sec,\n//     };\n//     this.setState(({ todoData }) => {\n//       const newArr = [...todoData];\n//       newArr.push(newItem);\n//       return {\n//         todoData: newArr,\n//       };\n//     });\n//   };\n\n//   completeItem = (id, value) => {\n//     this.setState(({ todoData }) => {\n//       const newArr = todoData.map((el) => {\n//         if (el.id === id) el.done = value;\n//         return el;\n//       });\n//       return { todoData: newArr };\n//     });\n//   };\n\n//   updateEdit = (id, text) => {\n//     this.setState(({ todoData }) => {\n//       const index = todoData.findIndex((el) => el.id === id);\n//       const newArr = [...todoData];\n//       newArr[index].label = text;\n//       return {\n//         todoData: newArr,\n//       };\n//     });\n//   };\n\n//   deleteItem = (id) => {\n//     this.setState(({ todoData }) => {\n//       const index = todoData.findIndex((el) => el.id === id);\n//       const newArr = [...todoData];\n//       newArr.splice(index, 1);\n//       return {\n//         todoData: newArr,\n//       };\n//     });\n//   };\n\n//   changeFilter = (filterName) => {\n//     this.setState({ filter: filterName });\n//   };\n\n//   filterItems = (todoData, filter) => {\n//     switch (filter) {\n//       case 'all':\n//         return todoData;\n//       case 'active':\n//         return todoData.filter((item) => !item.done);\n//       case 'completed':\n//         return todoData.filter((item) => item.done);\n//       default:\n//         return todoData;\n//     }\n//   };\n\n//   clear = () => {\n//     this.setState(({ todoData }) => {\n//       const newArr = todoData.filter((elem) => elem.done !== true);\n//         return {\n//           todoData: newArr,\n//         };\n//     });\n//   };\n\n//   render() {\n//     return (\n//         <section className=\"todoApp\">\n//           <NewTaskForm onItemAdd={this.onItemAdd} />\n//           <section className=\"main\">\n//             <TaskList\n//               todoData={this.filterItems(this.state.todoData, this.state.filter)}\n//               onDeleted={(id) => this.deleteItem(id)}\n//               onCompleted={this.completeItem}\n//               updateEdit={this.updateEdit}\n//             />\n//             <Footer\n//               count={this.filterItems(this.state.todoData, this.state.filter).length}\n//               filter={this.state.filter}\n//               changeFilter={this.changeFilter}\n//               onClear={() => this.clear(this.state.todoData)}\n//             />\n//           </section>\n//         </section>\n//     );\n//   }\n// }\n\nconst App = () => {\n  const [todoData, setTodoData] = useState([])\n  const [filter, setFilter] = useState('all')\n\n  const generateId = () => {\n    const date = Date.now()\n    const random = Math.floor(Math.random() * 1000)\n    const newId = parseInt(`${date}${random}`)\n    return newId\n  }\n\n  const onItemAdd = (text, min, sec) => {\n    const newItem = {\n      label: text,\n      done: false,\n      date: new Date(),\n      id: generateId(),\n      timer: +min * 60 + +sec,\n    }\n    const newArr = [...todoData]\n    newArr.push(newItem)\n    setTodoData(newArr)\n  }\n\n  const deleteItem = (id) => {\n    const index = todoData.findIndex((el) => el.id === id)\n    const newArr = [...todoData]\n    newArr.splice(index, 1)\n    setTodoData(newArr)\n  }\n\n  const completeItem = (id, done) => {\n    console.log(done)\n    // const newArr = todoData.map((el) => {\n    //   if (el.id === id) el.done = done;\n    //   return el;\n    // })\n    // setTodoData(newArr)\n  }\n\n  //   completeItem = (id, value) => {\n//     this.setState(({ todoData }) => {\n//       const newArr = todoData.map((el) => {\n//         if (el.id === id) el.done = value;\n//         return el;\n//       });\n//       return { todoData: newArr };\n//     });\n//   };\n\n  return (\n    // console.log( todoData )\n    <section className=\"todoApp\">\n          <NewTaskForm onItemAdd={onItemAdd} />\n          <section className=\"main\">\n            <TaskList\n              todoData={todoData}\n              deleteItem={deleteItem}\n              completeItem={completeItem}\n            />\n            {/* <Footer\n              count={this.filterItems(this.state.todoData, this.state.filter).length}\n              filter={this.state.filter}\n              changeFilter={this.changeFilter}\n              onClear={() => this.clear(this.state.todoData)}\n            /> */}\n          </section>\n        </section>\n  )\n}\n\nexport default App"],"mappings":";;AAAA,SAASA,QAAQ,QAAQ,OAAO;AAChC,SAASC,mBAAmB,QAAQ,UAAU;AAE9C,OAAOC,WAAW,MAAM,mCAAmC;AAC3D,OAAOC,QAAQ,MAAM,2BAA2B;AAChhB,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGN,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACO,MAAM,EAAEC,SAAS,CAAC,GAAGR,QAAQ,CAAC,KAAK,CAAC;EAE3C,MAAMS,UAAU,GAAG,MAAM;IACvB,MAAMC,IAAI,GAAGC,IAAI,CAACC,GAAG,EAAE;IACvB,MAAMC,MAAM,GAAGC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACD,MAAM,EAAE,GAAG,IAAI,CAAC;IAC/C,MAAMG,KAAK,GAAGC,QAAQ,CAAE,GAAEP,IAAK,GAAEG,MAAO,EAAC,CAAC;IAC1C,OAAOG,KAAK;EACd,CAAC;EAED,MAAME,SAAS,GAAG,CAACC,IAAI,EAAEC,GAAG,EAAEC,GAAG,KAAK;IACpC,MAAMC,OAAO,GAAG;MACdC,KAAK,EAAEJ,IAAI;MACXK,IAAI,EAAE,KAAK;MACXd,IAAI,EAAE,IAAIC,IAAI,EAAE;MAChBc,EAAE,EAAEhB,UAAU,EAAE;MAChBiB,KAAK,EAAE,CAACN,GAAG,GAAG,EAAE,GAAG,CAACC;IACtB,CAAC;IACD,MAAMM,MAAM,GAAG,CAAC,GAAGtB,QAAQ,CAAC;IAC5BsB,MAAM,CAACC,IAAI,CAACN,OAAO,CAAC;IACpBhB,WAAW,CAACqB,MAAM,CAAC;EACrB,CAAC;EAED,MAAME,UAAU,GAAIJ,EAAE,IAAK;IACzB,MAAMK,KAAK,GAAGzB,QAAQ,CAAC0B,SAAS,CAAEC,EAAE,IAAKA,EAAE,CAACP,EAAE,KAAKA,EAAE,CAAC;IACtD,MAAME,MAAM,GAAG,CAAC,GAAGtB,QAAQ,CAAC;IAC5BsB,MAAM,CAACM,MAAM,CAACH,KAAK,EAAE,CAAC,CAAC;IACvBxB,WAAW,CAACqB,MAAM,CAAC;EACrB,CAAC;EAED,MAAMO,YAAY,GAAG,CAACT,EAAE,EAAED,IAAI,KAAK;IACjCW,OAAO,CAACC,GAAG,CAACZ,IAAI,CAAC;IACjB;IACA;IACA;IACA;IACA;EACF,CAAC;;EAED;EACF;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEE;IAAA;IACE;IACA;MAAS,SAAS,EAAC,SAAS;MAAA,wBACtB,QAAC,WAAW;QAAC,SAAS,EAAEN;MAAU;QAAA;QAAA;QAAA;MAAA,QAAG,eACrC;QAAS,SAAS,EAAC,MAAM;QAAA,uBACvB,QAAC,QAAQ;UACP,QAAQ,EAAEb,QAAS;UACnB,UAAU,EAAEwB,UAAW;UACvB,YAAY,EAAEK;QAAa;UAAA;UAAA;UAAA;QAAA;MAC3B;QAAA;QAAA;QAAA;MAAA,QAOM;IAAA;MAAA;MAAA;MAAA;IAAA;EACF;AAElB,CAAC;AAAA,GArEK9B,GAAG;AAAA,KAAHA,GAAG;AAuET,eAAeA,GAAG;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}