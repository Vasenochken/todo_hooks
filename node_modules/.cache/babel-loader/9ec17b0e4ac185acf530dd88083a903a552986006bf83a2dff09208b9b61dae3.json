{"ast":null,"code":"var _jsxFileName = \"/home/vaseliy/\\u0420\\u0430\\u0431\\u043E\\u0447\\u0438\\u0439 \\u0441\\u0442\\u043E\\u043B/ReactApps/todoApp1/src/components/app/app.js\",\n  _s = $RefreshSig$();\nimport { useState } from 'react';\nimport NewTaskForm from '../new-task-form/new-task-form.js';\n// import TaskList from '../task-list/task-list.js';\n// import Footer from '../footer/footer.js';\n\n// import './app.css';\n\n// export default class App extends Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = {\n//       todoData: [],\n//       filter: 'all',\n//     };\n//     this.maxId = 100\n//   }\n\n//   onItemAdd = (text,min,sec) => {\n//     const newItem = {\n//       label: text,\n//       done: false,\n//       date: new Date(),\n//       id: this.maxId++,\n//       timer: +min * 60 + +sec,\n//     };\n//     this.setState(({ todoData }) => {\n//       const newArr = [...todoData];\n//       newArr.push(newItem);\n//       return {\n//         todoData: newArr,\n//       };\n//     });\n//   };\n\n//   completeItem = (id, value) => {\n//     this.setState(({ todoData }) => {\n//       const newArr = todoData.map((el) => {\n//         if (el.id === id) el.done = value;\n//         return el;\n//       });\n//       return { todoData: newArr };\n//     });\n//   };\n\n//   updateEdit = (id, text) => {\n//     this.setState(({ todoData }) => {\n//       const index = todoData.findIndex((el) => el.id === id);\n//       const newArr = [...todoData];\n//       newArr[index].label = text;\n//       return {\n//         todoData: newArr,\n//       };\n//     });\n//   };\n\n//   deleteItem = (id) => {\n//     this.setState(({ todoData }) => {\n//       const index = todoData.findIndex((el) => el.id === id);\n//       const newArr = [...todoData];\n//       newArr.splice(index, 1);\n//       return {\n//         todoData: newArr,\n//       };\n//     });\n//   };\n\n//   changeFilter = (filterName) => {\n//     this.setState({ filter: filterName });\n//   };\n\n//   filterItems = (todoData, filter) => {\n//     switch (filter) {\n//       case 'all':\n//         return todoData;\n//       case 'active':\n//         return todoData.filter((item) => !item.done);\n//       case 'completed':\n//         return todoData.filter((item) => item.done);\n//       default:\n//         return todoData;\n//     }\n//   };\n\n//   clear = () => {\n//     this.setState(({ todoData }) => {\n//       const newArr = todoData.filter((elem) => elem.done !== true);\n//         return {\n//           todoData: newArr,\n//         };\n//     });\n//   };\n\n//   render() {\n//     return (\n//         <section className=\"todoApp\">\n//           <NewTaskForm onItemAdd={this.onItemAdd} />\n//           <section className=\"main\">\n//             <TaskList\n//               todoData={this.filterItems(this.state.todoData, this.state.filter)}\n//               onDeleted={(id) => this.deleteItem(id)}\n//               onCompleted={this.completeItem}\n//               updateEdit={this.updateEdit}\n//             />\n//             <Footer\n//               count={this.filterItems(this.state.todoData, this.state.filter).length}\n//               filter={this.state.filter}\n//               changeFilter={this.changeFilter}\n//               onClear={() => this.clear(this.state.todoData)}\n//             />\n//           </section>\n//         </section>\n//     );\n//   }\n// }\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [todoData, setTodoData] = useState([]);\n  const [filter, setFilter] = useState('all');\n  let id = 0;\n  //   onItemAdd = (text,min,sec) => {\n  //     const newItem = {\n  //       label: text,\n  //       done: false,\n  //       date: new Date(),\n  //       id: this.maxId++,\n  //       timer: +min * 60 + +sec,\n  //     };\n  //     this.setState(({ todoData }) => {\n  //       const newArr = [...todoData];\n  //       newArr.push(newItem);\n  //       return {\n  //         todoData: newArr,\n  //       };\n  //     });\n  //   };\n  function getID() {\n    id++;\n    return id;\n  }\n  const onItemAdd = (text, min, sec) => {\n    console.log('textMinSec: ', text, min, sec);\n    const newItem = {\n      label: text,\n      done: false,\n      date: new Date(),\n      id: getID(),\n      timer: +min * 60 + +sec\n    };\n    setTodoData(() => {\n      const newArr = [...todoData];\n      // console.log('setData: ', newArr.push(newItem))\n      newArr.push(newItem);\n      return newArr;\n    });\n  };\n  console.log('todoData: ', todoData);\n  return (\n    /*#__PURE__*/\n    // console.log( todoData )\n    _jsxDEV(\"section\", {\n      className: \"todoApp\",\n      children: /*#__PURE__*/_jsxDEV(NewTaskForm, {\n        onItemAdd: onItemAdd\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 5\n    }, this)\n  );\n};\n_s(App, \"mvS/TqyQP7uXDFPPgZx71PfhVSk=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useState","NewTaskForm","App","todoData","setTodoData","filter","setFilter","id","getID","onItemAdd","text","min","sec","console","log","newItem","label","done","date","Date","timer","newArr","push"],"sources":["/home/vaseliy/Рабочий стол/ReactApps/todoApp1/src/components/app/app.js"],"sourcesContent":["import { useState } from 'react';\n\nimport NewTaskForm from '../new-task-form/new-task-form.js';\n// import TaskList from '../task-list/task-list.js';\n// import Footer from '../footer/footer.js';\n\n// import './app.css';\n\n// export default class App extends Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = {\n//       todoData: [],\n//       filter: 'all',\n//     };\n//     this.maxId = 100\n//   }\n\n//   onItemAdd = (text,min,sec) => {\n//     const newItem = {\n//       label: text,\n//       done: false,\n//       date: new Date(),\n//       id: this.maxId++,\n//       timer: +min * 60 + +sec,\n//     };\n//     this.setState(({ todoData }) => {\n//       const newArr = [...todoData];\n//       newArr.push(newItem);\n//       return {\n//         todoData: newArr,\n//       };\n//     });\n//   };\n\n//   completeItem = (id, value) => {\n//     this.setState(({ todoData }) => {\n//       const newArr = todoData.map((el) => {\n//         if (el.id === id) el.done = value;\n//         return el;\n//       });\n//       return { todoData: newArr };\n//     });\n//   };\n\n//   updateEdit = (id, text) => {\n//     this.setState(({ todoData }) => {\n//       const index = todoData.findIndex((el) => el.id === id);\n//       const newArr = [...todoData];\n//       newArr[index].label = text;\n//       return {\n//         todoData: newArr,\n//       };\n//     });\n//   };\n\n//   deleteItem = (id) => {\n//     this.setState(({ todoData }) => {\n//       const index = todoData.findIndex((el) => el.id === id);\n//       const newArr = [...todoData];\n//       newArr.splice(index, 1);\n//       return {\n//         todoData: newArr,\n//       };\n//     });\n//   };\n\n//   changeFilter = (filterName) => {\n//     this.setState({ filter: filterName });\n//   };\n\n//   filterItems = (todoData, filter) => {\n//     switch (filter) {\n//       case 'all':\n//         return todoData;\n//       case 'active':\n//         return todoData.filter((item) => !item.done);\n//       case 'completed':\n//         return todoData.filter((item) => item.done);\n//       default:\n//         return todoData;\n//     }\n//   };\n\n//   clear = () => {\n//     this.setState(({ todoData }) => {\n//       const newArr = todoData.filter((elem) => elem.done !== true);\n//         return {\n//           todoData: newArr,\n//         };\n//     });\n//   };\n\n//   render() {\n//     return (\n//         <section className=\"todoApp\">\n//           <NewTaskForm onItemAdd={this.onItemAdd} />\n//           <section className=\"main\">\n//             <TaskList\n//               todoData={this.filterItems(this.state.todoData, this.state.filter)}\n//               onDeleted={(id) => this.deleteItem(id)}\n//               onCompleted={this.completeItem}\n//               updateEdit={this.updateEdit}\n//             />\n//             <Footer\n//               count={this.filterItems(this.state.todoData, this.state.filter).length}\n//               filter={this.state.filter}\n//               changeFilter={this.changeFilter}\n//               onClear={() => this.clear(this.state.todoData)}\n//             />\n//           </section>\n//         </section>\n//     );\n//   }\n// }\n\nconst App = () => {\n  const [todoData, setTodoData] = useState([])\n  const [filter, setFilter] = useState('all')\n  let id = 0\n  //   onItemAdd = (text,min,sec) => {\n//     const newItem = {\n//       label: text,\n//       done: false,\n//       date: new Date(),\n//       id: this.maxId++,\n//       timer: +min * 60 + +sec,\n//     };\n//     this.setState(({ todoData }) => {\n//       const newArr = [...todoData];\n//       newArr.push(newItem);\n//       return {\n//         todoData: newArr,\n//       };\n//     });\n//   };\n  function getID() {\n    id++\n    return id\n  }\n\n  const onItemAdd = (text, min, sec) => {\n    console.log('textMinSec: ', text, min, sec)\n    const newItem = {\n      label: text,\n      done: false,\n      date: new Date(),\n      id: getID(),\n      timer: +min * 60 + +sec,\n    }\n    setTodoData(() => {\n      const newArr = [...todoData]\n      // console.log('setData: ', newArr.push(newItem))\n      newArr.push(newItem)\n      return newArr\n    })\n  }\n    console.log('todoData: ',  todoData)\n  return (\n    // console.log( todoData )\n    <section className=\"todoApp\">\n          <NewTaskForm onItemAdd={onItemAdd} />\n          {/* <section className=\"main\">\n            <TaskList\n              todoData={this.filterItems(this.state.todoData, this.state.filter)}\n              onDeleted={(id) => this.deleteItem(id)}\n              onCompleted={this.completeItem}\n              updateEdit={this.updateEdit}\n            />\n            <Footer\n              count={this.filterItems(this.state.todoData, this.state.filter).length}\n              filter={this.state.filter}\n              changeFilter={this.changeFilter}\n              onClear={() => this.clear(this.state.todoData)}\n            />\n          </section> */}\n        </section>\n  )\n}\n\nexport default App"],"mappings":";;AAAA,SAASA,QAAQ,QAAQ,OAAO;AAEhC,OAAOC,WAAW,MAAM,mCAAmC;AAC3D;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA,MAAMC,GAAG,GAAG,MAAM;EAAA;EAChB,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGJ,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACK,MAAM,EAAEC,SAAS,CAAC,GAAGN,QAAQ,CAAC,KAAK,CAAC;EAC3C,IAAIO,EAAE,GAAG,CAAC;EACV;EACF;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACE,SAASC,KAAK,GAAG;IACfD,EAAE,EAAE;IACJ,OAAOA,EAAE;EACX;EAEA,MAAME,SAAS,GAAG,CAACC,IAAI,EAAEC,GAAG,EAAEC,GAAG,KAAK;IACpCC,OAAO,CAACC,GAAG,CAAC,cAAc,EAAEJ,IAAI,EAAEC,GAAG,EAAEC,GAAG,CAAC;IAC3C,MAAMG,OAAO,GAAG;MACdC,KAAK,EAAEN,IAAI;MACXO,IAAI,EAAE,KAAK;MACXC,IAAI,EAAE,IAAIC,IAAI,EAAE;MAChBZ,EAAE,EAAEC,KAAK,EAAE;MACXY,KAAK,EAAE,CAACT,GAAG,GAAG,EAAE,GAAG,CAACC;IACtB,CAAC;IACDR,WAAW,CAAC,MAAM;MAChB,MAAMiB,MAAM,GAAG,CAAC,GAAGlB,QAAQ,CAAC;MAC5B;MACAkB,MAAM,CAACC,IAAI,CAACP,OAAO,CAAC;MACpB,OAAOM,MAAM;IACf,CAAC,CAAC;EACJ,CAAC;EACCR,OAAO,CAACC,GAAG,CAAC,YAAY,EAAGX,QAAQ,CAAC;EACtC;IAAA;IACE;IACA;MAAS,SAAS,EAAC,SAAS;MAAA,uBACtB,QAAC,WAAW;QAAC,SAAS,EAAEM;MAAU;QAAA;QAAA;QAAA;MAAA;IAAG;MAAA;MAAA;MAAA;IAAA;EAe7B;AAElB,CAAC;AAAA,GA9DKP,GAAG;AAAA,KAAHA,GAAG;AAgET,eAAeA,GAAG;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}